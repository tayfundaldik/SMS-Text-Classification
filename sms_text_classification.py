# -*- coding: utf-8 -*-
"""SMS_Text_Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bBHKZTnlY1ZcHaTRPnOBPKKPWUjmAoFZ
"""

# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

#This is because our data is a tsv file(i didn't know it exits until now)(Tayfun Daldık's note)
train_data = pd.read_csv(train_file_path, sep='\t')
test_data = pd.read_csv(test_file_path, sep='\t')

#Editing Columns(Tayfun Daldık's note)
train_data.columns = ['category' , 'message']
test_data.columns=['category' , 'message']

test_data.head()

"""##I learned make_pipeline for this exercise and that was hard to undersand until using it.

###CountVectorizer converts vocabs to binary values so i had to add it. I used naive bayes because i looked some text classification examples and they used it and it is efficient
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
model = make_pipeline(CountVectorizer(), MultinomialNB())
model.fit(train_data['message'], train_data['category'])

# function to predict messages based on model
def predict_message(pred_text):
  predict = model.predict_proba([pred_text])[0]
  likeliness = max(predict)
  label = "ham" if predict.argmax() == 0 else "spam"
  prediction =[likeliness, label]
  return (prediction)

pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won £1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()